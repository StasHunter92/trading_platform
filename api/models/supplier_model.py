from django.db import models
from rest_framework.exceptions import ValidationError


# ----------------------------------------------------------------------------------------------------------------------
# Create models
class Supplier(models.Model):
    class Type(models.IntegerChoices):
        """Type of the supplier"""

        factory = 1, 'Завод'
        retail = 2, 'Розничная сеть'
        sole_trader = 3, 'Индивидуальный предприниматель'

    type = models.PositiveSmallIntegerField(choices=Type.choices, verbose_name='Тип')
    title = models.CharField(max_length=100, verbose_name='Название')
    contact = models.ForeignKey(
        'Contact',
        blank=True,
        null=True,
        on_delete=models.PROTECT,
        verbose_name='Контакты'
    )
    products = models.ManyToManyField(
        'Product',
        blank=True,
        verbose_name='Товары'
    )
    supplier = models.ForeignKey(
        'self',
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        verbose_name='Поставщик',
        related_name='suppliers',
    )
    indebtedness = models.DecimalField(
        max_digits=11,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name='Задолженность'
    )
    created = models.DateTimeField(verbose_name='Дата создания', auto_now_add=True)
    level = models.PositiveIntegerField(default=0, verbose_name='Уровень звена')

    class Meta:
        verbose_name = 'Участник'
        verbose_name_plural = 'Участники'

    def __str__(self) -> str:
        """Returns the title of the supplier"""

        return self.title

    def clean(self):
        """Checks that the Factory supplier can't have a nested supplier"""

        if self.type == Supplier.Type.factory and self.supplier is not None:
            raise ValidationError('Factory does not have a supplier')

    def save(self, *args, **kwargs):
        """Autogenerated level of supplier"""

        if self.supplier is not None:
            self.level = self.supplier.level + 1
        super().save(*args, **kwargs)
